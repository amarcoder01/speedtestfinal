name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: ''

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../project && npm ci

    - name: Build application
      run: npm run build:all

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          # If no previous tag exists, get all commits
          echo "CHANGELOG=$(git log --pretty=format:'- %s (%h)' | head -10)" >> $GITHUB_OUTPUT
        else
          # Get commits since the latest tag
          echo "CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:'- %s (%h)' | head -10)" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref }}
        release_name: Release ${{ github.event.inputs.version || github.ref }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Docker
          ```
          docker pull ${{ secrets.DOCKER_USERNAME || 'yourusername' }}/speedtest:${{ github.event.inputs.version || github.ref_name }}
          ```
          
          ### Kubernetes
          ```
          helm upgrade --install speedtest ./helm/speedtest --set image.tag=${{ github.event.inputs.version || github.ref_name }}
          ```
        draft: false
        prerelease: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../project && npm ci

    - name: Build application
      run: npm run build:all

    - name: Create frontend artifact
      run: |
        cd project
        zip -r ../frontend-${{ github.event.inputs.version || github.ref_name }}.zip dist

    - name: Create backend artifact
      run: |
        cd backend
        zip -r ../backend-${{ github.event.inputs.version || github.ref_name }}.zip . -x "node_modules/*"

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-${{ github.event.inputs.version || github.ref_name }}
        path: frontend-${{ github.event.inputs.version || github.ref_name }}.zip

    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-${{ github.event.inputs.version || github.ref_name }}
        path: backend-${{ github.event.inputs.version || github.ref_name }}.zip

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      if: github.event_name == 'push'

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/speedtest:latest
          ${{ secrets.DOCKER_USERNAME }}/speedtest:${{ github.event.inputs.version || steps.version.outputs.VERSION }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/speedtest:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/speedtest:buildcache,mode=max