name: Changelog Generation

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate changelog for (e.g., v1.2.3)'
        required: false
        type: string

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Get latest version
        id: latest-version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Set version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using manually specified version: ${{ github.event.inputs.version }}"
          else
            # Auto-increment patch version if not specified
            LATEST_TAG="${{ steps.latest-version.outputs.latest_tag }}"
            LATEST_TAG=${LATEST_TAG#v}  # Remove 'v' prefix
            
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Auto-incremented version: $NEW_VERSION"
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Create a temporary changelog file
          TEMP_CHANGELOG=$(mktemp)
          
          # Generate changelog since the last tag
          conventional-changelog -p angular -r 1 -o $TEMP_CHANGELOG
          
          # Read the temporary changelog
          CHANGELOG_CONTENT=$(cat $TEMP_CHANGELOG)
          
          # Prepare the changelog content for GitHub output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Update the CHANGELOG.md file
          if [ -f CHANGELOG.md ]; then
            # If CHANGELOG.md exists, prepend the new changes
            EXISTING_CONTENT=$(cat CHANGELOG.md)
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## ${{ steps.version.outputs.version }} ($(date +'%Y-%m-%d'))" >> CHANGELOG.md
            echo "$CHANGELOG_CONTENT" >> CHANGELOG.md
            echo "$EXISTING_CONTENT" | tail -n +1 >> CHANGELOG.md
          else
            # If CHANGELOG.md doesn't exist, create it
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## ${{ steps.version.outputs.version }} ($(date +'%Y-%m-%d'))" >> CHANGELOG.md
            echo "$CHANGELOG_CONTENT" >> CHANGELOG.md
          fi

      - name: Commit and push changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add CHANGELOG.md
          git commit -m "chore(changelog): update for ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push

      - name: Create Pull Request
        if: github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): prepare for ${{ steps.version.outputs.version }}"
          title: "Release ${{ steps.version.outputs.version }}"
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            This PR was automatically generated by the changelog workflow.
          branch: release/${{ steps.version.outputs.version }}
          base: main
          labels: "type/release,auto-merge"