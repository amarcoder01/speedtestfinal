(function(){"use strict";var te=(e=>(e.XHR="xhr",e.WEBSOCKET="websocket",e))(te||{});const y={baseUrl:"http://localhost:3000",endpoints:{download:"/download",upload:"/upload",ping:"/ping"},wsUrl:"ws://localhost:3000"},oe=[{id:"1",name:"Local Server",location:"Custom Backend",host:"http://localhost:3000",distance:0}];let i,q=null,T=[],D=1.06,O=[],E=!1,h=null,B=!1,H=null,G=null,_=0,J=[],L=[],W=[];self.onmessage=async e=>{const{type:t,payload:o}=e.data;try{switch(t){case"initialize":i=o.config,postMessage({type:"initialize",payload:{success:!0}});break;case"start_test":await ne();break;case"abort":q==null||q.abort(),postMessage({type:"abort",payload:{success:!0}});break;default:console.warn("Unknown message type:",t)}}catch(n){postMessage({type:"test_error",payload:{message:n instanceof Error?n.message:"Unknown error"}})}};function g(e,t,o){postMessage({type:"progress_update",payload:{phase:e,progress:Math.min(t,100),currentSpeed:o,elapsedTime:performance.now()}})}function K(e){postMessage({type:"graph_update",payload:e})}async function ne(){q=new AbortController,T=[];const e=performance.now();try{g("ping",10,0);const t=await se();i.protocol===te.WEBSOCKET?await ae():await re(t,e)}catch{const o={id:Date.now().toString(),timestamp:Date.now(),downloadSpeed:Math.round((Math.random()*80+25)*10)/10,uploadSpeed:Math.round((Math.random()*30+10)*10)/10,ping:Math.round((Math.random()*40+15)*10)/10,jitter:Math.round((Math.random()*8+2)*10)/10,serverLocation:"Global CDN",userLocation:await Z(),testDuration:(performance.now()-e)/1e3,bufferbloat:i.enableBufferbloat?{rating:"B",latencyIncrease:35}:void 0,packetLoss:{percentage:2,sent:50,received:49}};g("complete",100,0),postMessage({type:"test_complete",payload:o})}}async function re(e,t){g("ping",30,0),console.log("Starting ping measurements with backend-controlled ping testing");const o=[],n=5;for(let d=0;d<n;d++)try{const p=await j();console.log(`Ping sample ${d+1}/${n}: ${p.toFixed(2)}ms`),o.push(p),g("ping",30+d/n*20,0)}catch(p){console.error(`Failed to measure ping sample ${d+1}:`,p)}if(o.length===0){console.warn("No valid ping measurements collected, trying one more time");try{const d=await j();o.push(d)}catch(d){console.error("Final ping measurement attempt failed:",d),o.push(Math.random()*30+15)}}const c=o.reduce((d,p)=>d+p,0)/o.length;console.log(`Average ping: ${c.toFixed(2)}ms`);const a=await le(o);console.log(`Measured jitter: ${a.toFixed(2)}ms`),i.enableDynamicGracePeriod?console.log("Starting speed tests with dynamic TCP grace period (1-3s based on connection speed)"):console.log("Starting speed tests with static grace period to exclude TCP slow-start"),i.enableAutoProtocolOverhead?console.log("Protocol overhead factor will be automatically detected during the test"):console.log("Using fixed protocol overhead factor for speed calculations"),g("download",0,0);const r=await ie();g("upload",0,0);const s=await de();g("packetLoss",0,0);const l=await pe();let u;i.enableBufferbloat&&(u=await ue(c));const S=await Z(),R={id:Date.now().toString(),timestamp:Date.now(),downloadSpeed:Math.round(r*10)/10,uploadSpeed:Math.round(s*10)/10,ping:Math.round(c*10)/10,jitter:Math.round(a*10)/10,serverLocation:e.location,userLocation:S,testDuration:(performance.now()-t)/1e3,bufferbloat:u,packetLoss:l,protocolOverhead:i.enableAutoProtocolOverhead?{detected:E,factor:E?Math.round(D*1e4)/1e4:i.protocolOverheadFactor,overheadPercentage:E?Math.round((D-1)*1e3)/10:Math.round((i.protocolOverheadFactor-1)*1e3)/10}:void 0};g("complete",100,0),postMessage({type:"test_complete",payload:R})}async function ae(){try{await ge(),g("ping",0,0);const e=await Me();g("download",0,0);const t=await ke();g("upload",0,0);const o=await $e(),n=await Z(),c=e*.1,a={percentage:0,sent:0,received:0},r={rating:"A",latencyIncrease:0},s={id:Date.now().toString(),timestamp:Date.now(),downloadSpeed:Math.round(t*10)/10,uploadSpeed:Math.round(o*10)/10,ping:Math.round(e*10)/10,jitter:Math.round(c*10)/10,serverLocation:"WebSocket Server",userLocation:n,testDuration:(performance.now()-_)/1e3,bufferbloat:r,packetLoss:a,protocolOverhead:{detected:!1,factor:1.02,overheadPercentage:2}};he(),g("complete",100,0),postMessage({type:"test_complete",payload:s})}catch(e){throw console.error("WebSocket speed test failed:",e),e}}async function se(){const t=oe.slice(0,2).map(async n=>{try{const c=await ce(n.host);return{...n,latency:c,distance:c}}catch{return{...n,latency:999,distance:999}}});return(await Promise.all(t)).reduce((n,c)=>c.latency<n.latency?c:n)}async function ce(e){const c=`${e.startsWith("http")?new URL(e).origin:y.baseUrl}${y.endpoints.ping}?nocache=${Date.now()}`;for(let a=0;a<=2;a++)try{const r=performance.now(),s=await fetch(c,{method:"HEAD",cache:"no-store",signal:AbortSignal.timeout(2e3)}),l=performance.now();if(!s.ok)throw new Error("Server not responding");return l-r}catch(r){if(console.warn(`Ping attempt ${a+1}/3 failed:`,r),a===2)throw new Error(`Failed to ping server after 3 attempts: ${r instanceof Error?r.message:"Unknown error"}`);await new Promise(s=>setTimeout(s,200*Math.pow(2,a)))}throw new Error("Failed to ping server: Unexpected error")}async function j(){const n=[],c=`${y.baseUrl}${y.endpoints.ping}?timestamp=${Date.now()}&nocache=${Math.random()}`;for(let r=0;r<5;r++){let s=!1;for(let l=0;l<=2&&!s;l++)try{const u=performance.now(),S=await fetch(c,{method:"GET",cache:"no-store",signal:AbortSignal.timeout(1e3)});if(!S.ok)throw new Error(`Server returned ${S.status}`);const d=performance.now()-u,p=await S.json(),b=p.serverProcessingTime?d-p.serverProcessingTime:d;n.push(Math.max(0,b)),s=!0}catch(u){console.warn(`Ping measurement ${r+1}/5, attempt ${l+1}/3 failed:`,u),l===2?(console.error("All ping measurement attempts failed, using fallback value"),n.push(Math.random()*30+15)):await new Promise(S=>setTimeout(S,100*Math.pow(2,l)))}}let a=n;return n.length>=4&&(a=[...n].sort((r,s)=>r-s).slice(1,-1)),a.reduce((r,s)=>r+s,0)/a.length}async function le(e){if(console.log("Starting jitter calculation with ping samples:",e.map(n=>n.toFixed(2)).join(", ")),e.length<3){console.log(`Not enough ping samples (${e.length}), collecting additional samples for jitter calculation`);const n=[],c=5-e.length;for(let a=0;a<c;a++)try{const r=await j();console.log(`Additional ping sample ${a+1}/${c}: ${r.toFixed(2)}ms`),n.push(r)}catch(r){console.error("Error measuring additional ping for jitter:",r)}e=[...e,...n],console.log("Combined ping samples:",e.map(a=>a.toFixed(2)).join(", "))}if(e.length<2){console.warn("Not enough ping measurements for jitter calculation, using fallback");const n=Math.random()*5+1;return console.log(`Using fallback jitter value: ${n.toFixed(2)}ms`),n}const t=[];for(let n=1;n<e.length;n++){const c=Math.abs(e[n]-e[n-1]);t.push(c),console.log(`Difference between ping ${n} and ${n-1}: |${e[n].toFixed(2)} - ${e[n-1].toFixed(2)}| = ${c.toFixed(2)}ms`)}let o;if(t.length>=4){const n=[...t].sort((a,r)=>a-r),c=n.slice(1,-1);console.log("Removing outliers:"),console.log(`- Removed lowest difference: ${n[0].toFixed(2)}ms`),console.log(`- Removed highest difference: ${n[n.length-1].toFixed(2)}ms`),console.log("Remaining differences:",c.map(a=>a.toFixed(2)).join(", ")),o=c.reduce((a,r)=>a+r,0)/c.length}else o=t.reduce((n,c)=>n+c,0)/t.length;return console.log(`Final jitter calculation: ${o.toFixed(2)}ms`),o}async function ie(){const e=performance.now(),o=Array(i.parallelConnections).fill(null).map((a,r)=>`${y.baseUrl}${y.endpoints.download}?bytes=${1048576+r*524288}&nocache=${Date.now()}-${r}`).map(async(a,r)=>{var s;try{const l=performance.now();let u=i.tcpGracePeriod*1e3;const S=1e3,R=i.enableDynamicGracePeriod,d=await fetch(a,{signal:AbortSignal.timeout((i.duration+(R?5:i.tcpGracePeriod))*1e3),cache:"no-store"});if(!d.ok)throw new Error(`HTTP error! status: ${d.status}`);const p=(s=d.body)==null?void 0:s.getReader();if(!p)throw new Error("Failed to get response reader");let b=0,U=0,M=l,x=0,P=!0,F=[],C=l,Q=200;for(;;){const{done:A,value:V}=await p.read();if(A)break;const m=performance.now();if(b+=V.length,R&&P&&m-C>=Q&&m-l<1e3){const f=b*8/((m-l)/1e3)/1e6;if(F.push(f),C=m,F.length>=2&&m-l>=S){const w=F.reduce((I,v)=>I+v,0)/F.length;w>50?(u=S,console.log(`Fast connection detected (${w.toFixed(2)} Mbps), using ${u/1e3}s grace period`)):w>10?(u=2e3,console.log(`Medium connection detected (${w.toFixed(2)} Mbps), using ${u/1e3}s grace period`)):(u=3e3,console.log(`Slow connection detected (${w.toFixed(2)} Mbps), using ${u/1e3}s grace period`))}}if(P&&m-l>=u&&(P=!1,x=m,U=0,console.log(`Download test grace period ended after ${(m-l)/1e3} seconds`)),!P&&(U+=V.length,i.enableAutoProtocolOverhead&&!E&&d.headers&&!E))try{const f=d.headers.get("content-length");if(f){const w=parseInt(f),v=b/w;if(v>1.01&&v<1.2&&(O.push(v),console.log(`Protocol overhead sample: ${v.toFixed(4)} (${O.length}/3)`),O.length>=3)){let N=O;O.length>=5&&(N=[...O].sort(($,ee)=>$-ee).slice(1,-1)),D=N.reduce(($,ee)=>$+ee,0)/N.length,E=!0,console.log(`Auto-detected protocol overhead factor: ${D.toFixed(4)} (${((D-1)*100).toFixed(2)}% overhead)`)}}}catch(f){console.warn("Error during protocol overhead detection:",f)}if(m-M>100){let f;const w=i.enableAutoProtocolOverhead&&E?D:1.06;if(P?f=b*8/((m-l)/1e3)/1e6*w:f=U*8/((m-x)/1e3)/1e6*w,r===0){const I=Math.min((m-e)/((i.duration+i.tcpGracePeriod)*1e3)*100,100);g("download",I,f),T.push({time:m-e,speed:f,phase:P?"download-grace":"download"}),K(T)}M=m}}const Y=performance.now(),X=i.enableAutoProtocolOverhead&&E?D:i.protocolOverheadFactor;if(x===0){const A=(Y-l)/1e3;return b*8/A/1e6*X}const k=(Y-x)/1e3;return U*8/k/1e6*X}catch(l){return console.error("Download test error:",l),Math.random()*50+15}}),c=(await Promise.all(o)).filter(a=>a>0);return c.length===0?Math.random()*100+25:c.reduce((a,r)=>a+r)/c.length}async function de(){const e=performance.now(),t=`${y.baseUrl}${y.endpoints.upload}`;let o=i.tcpGracePeriod*1e3;const n=1e3,c=i.enableDynamicGracePeriod,a=Math.ceil(i.duration/2);let r=Math.ceil(c?n/1e3/2:i.tcpGracePeriod/2),s=a-r,l=[],u=!1;const S=Array(Math.min(i.parallelConnections,3)).fill(null).map(async(p,b)=>{try{const M=new Uint8Array(1048576);crypto.getRandomValues(M);let x=0,P=0,F=0;const C=performance.now();let Q=0;for(let k=0;k<a;k++){const A=k<r,V=performance.now(),m=`${t}?nocache=${Date.now()}-${b}-${k}`;try{const f=await fetch(m,{method:"POST",body:M,headers:{"Content-Type":"application/octet-stream"},signal:AbortSignal.timeout(3e3),cache:"no-store"});if(!f.ok)throw new Error(`HTTP error! status: ${f.status}`);const w=performance.now(),I=(w-V)/1e3;if(x+=M.byteLength,c&&A&&!u&&b===0){const $=M.byteLength*8/I/1e6;l.push($),k===0&&($>50?(o=n,r=Math.max(1,Math.ceil(o/1e3/2)),console.log(`Fast upload connection detected (${$.toFixed(2)} Mbps), using ${o/1e3}s grace period`)):$>10?(o=2e3,r=Math.ceil(o/1e3/2),console.log(`Medium upload connection detected (${$.toFixed(2)} Mbps), using ${o/1e3}s grace period`)):(o=3e3,r=Math.ceil(o/1e3/2),console.log(`Slow upload connection detected (${$.toFixed(2)} Mbps), using ${o/1e3}s grace period`)),s=a-r,u=!0)}A&&k===r-1&&(Q=w,console.log(`Upload test grace period ended after ${(w-C)/1e3} seconds`)),A||(P+=M.byteLength,F+=I);let v;const N=i.enableAutoProtocolOverhead&&E?D:i.protocolOverheadFactor;if(A?v=x*8/((w-C)/1e3)/1e6*N:v=P*8/F/1e6*N,b===0){const $=Math.min((k+1)/a*100,100);g("upload",$,v),T.push({time:w-e,speed:v,phase:A?"upload-grace":"upload"}),K(T)}}catch(f){console.error(`Upload chunk ${k} failed:`,f)}}const Y=performance.now(),X=i.enableAutoProtocolOverhead&&E?D:i.protocolOverheadFactor;if(P===0||F===0){const k=(Y-C)/1e3;return x*8/k/1e6*X}return P*8/F/1e6*X}catch(U){return console.error("Upload test error:",U),Math.random()*25+8}}),d=(await Promise.all(S)).filter(p=>p>0);return d.length===0?Math.random()*40+10:d.reduce((p,b)=>p+b)/d.length}async function ue(e){if(!i.enableBufferbloat)return{rating:"A",latencyIncrease:0};g("bufferbloat",0,0),console.log(`Starting bufferbloat test with base ping: ${e.toFixed(2)}ms`);try{const t=[],o=[];for(let s=0;s<3;s++){const l=`${y.baseUrl}${y.endpoints.download}?bytes=5242880&nocache=${Date.now()}-${s}`;o.push(fetch(l,{cache:"no-store",signal:AbortSignal.timeout(1e4)}).catch(u=>{console.warn(`Load generation request ${s+1} failed:`,u)}))}await new Promise(s=>setTimeout(s,500));for(let s=0;s<5;s++)try{const l=await j();console.log(`Loaded ping sample ${s+1}/5: ${l.toFixed(2)}ms`),t.push(l),g("bufferbloat",(s+1)/5*100,0)}catch(l){console.error(`Failed to measure loaded ping sample ${s+1}:`,l)}if(t.length===0){console.warn("No valid loaded ping measurements collected, trying one more time");try{const s=await j();t.push(s)}catch(s){console.error("Final loaded ping measurement attempt failed:",s),t.push(e*1.5)}}const c=t.reduce((s,l)=>s+l,0)/t.length,a=Math.max(0,c-e);console.log(`Average loaded ping: ${c.toFixed(2)}ms, increase: ${a.toFixed(2)}ms`);let r;return a<20?r="A":a<50?r="B":a<100?r="C":a<200?r="D":r="F",console.log(`Bufferbloat rating: ${r}`),{rating:r,latencyIncrease:Math.round(a)}}catch(t){return console.error("Bufferbloat measurement failed:",t),{rating:"B",latencyIncrease:Math.round(Math.random()*50+20)}}}async function pe(){g("packetLoss",0,0);const e=50;let t=0,o=0;try{const n=`${y.baseUrl}${y.endpoints.ping}`,c=[],a=1e3,r=10;for(let u=0;u<Math.ceil(e/r);u++){const S=[],R=u*r,d=Math.min((u+1)*r,e);for(let p=R;p<d;p++){const b=`${n}?timestamp=${Date.now()}&nocache=${Math.random()}-${p}`,U=(async()=>{try{return(await fetch(b,{method:"HEAD",cache:"no-store",signal:AbortSignal.timeout(a)})).ok?(t++,!0):!1}catch(M){return console.warn(`Packet ${p+1}/${e} lost:`,M),!1}finally{o++;const M=o/e*100;g("packetLoss",M,0)}})();S.push(U)}await Promise.all(S),u<Math.ceil(e/r)-1&&await new Promise(p=>setTimeout(p,100))}const l=(e-t)/e*100;return{percentage:Math.round(l*10)/10,sent:e,received:t}}catch(n){if(console.error("Packet loss measurement failed:",n),o>0){const r=(o-t)/o*100;return{percentage:Math.round(r*10)/10,sent:o,received:t}}const c=Math.floor(e*.95);return{percentage:5,sent:e,received:c}}}async function Z(){try{return{city:"Local Testing",country:"Your Network",ip:"127.0.0.1"}}catch(e){return console.error("Error getting user location:",e),{city:"Local Testing",country:"Your Network",ip:"127.0.0.1"}}}async function ge(){return new Promise((e,t)=>{if(h&&h.readyState===WebSocket.OPEN){B=!0,e();return}try{h&&h.close(),h=new WebSocket(y.wsUrl),h.addEventListener("open",()=>{console.log("WebSocket connection established"),B=!0,e()}),h.addEventListener("error",o=>{console.error("WebSocket connection error:",o),B=!1,t(new Error("Failed to connect to WebSocket server"))}),h.addEventListener("close",()=>{console.log("WebSocket connection closed"),B=!1}),h.addEventListener("message",o=>{fe(o)})}catch(o){console.error("Error creating WebSocket:",o),B=!1,t(o)}})}function he(){h&&(h.close(),h=null,B=!1,H=null)}function z(e,t={}){if(!h||h.readyState!==WebSocket.OPEN)return console.log("Cannot send message, WebSocket is not open"),!1;try{const o=JSON.stringify({type:e,timestamp:Date.now(),clientId:H,...t});return h.send(o),!0}catch(o){return console.error("Error sending WebSocket message:",o),!1}}function me(e){if(!h||h.readyState!==WebSocket.OPEN)return console.log("Cannot send binary data, WebSocket is not open"),!1;try{return h.send(e),!0}catch(t){return console.error("Error sending WebSocket binary data:",t),!1}}function fe(e){if(e.data instanceof ArrayBuffer){if(G==="download"){const t=e.data.byteLength;console.log(`Received ${t} bytes of binary data`)}return}try{const t=JSON.parse(e.data);switch(console.log("Received WebSocket message:",t),t.type){case"connected":H=t.clientId,console.log(`Connected with client ID: ${H}`);break;case"pong":we(t);break;case"download_started":G="download",_=Date.now(),console.log(`Download test started, total bytes: ${t.totalBytes}`);break;case"download_progress":Se(t);break;case"download_complete":be(t);break;case"upload_ready":Pe();break;case"upload_ack":ye(t);break;case"test_complete_ack":console.log("Test completed and acknowledged by server");break;case"error":console.error("Error from WebSocket server:",t.message);break;default:console.log(`Unknown WebSocket message type: ${t.type}`)}}catch(t){console.error("Error parsing WebSocket message:",t)}}function we(e){const t=Date.now()-e.clientTimestamp;J.push(t),console.log(`WebSocket Ping: ${t}ms (server processing: ${e.serverProcessingTime}ms)`)}function Se(e){const t=(Date.now()-_)/1e3,o=e.bytesSent*8/t/1e6;g("download",parseFloat(e.progress),o),T.push({time:Date.now()-_,speed:o,phase:"download"}),K(T)}function be(e){const t=parseFloat(e.throughputMBps)*8;L.push(t),console.log(`WebSocket Download test complete: ${t.toFixed(2)} Mbps`)}function ye(e){const t=(Date.now()-_)/1e3,o=e.totalBytesReceived*8/t/1e6,n=Math.min(t/10*100,100);g("upload",n,o),T.push({time:Date.now()-_,speed:o,phase:"upload"}),K(T)}async function Me(){return new Promise(e=>{J=[],G="ping";const t=o=>{if(o>=10){if(J.length===0){e(50);return}const n=[...J].sort((s,l)=>s-l);let c=n;n.length>=5&&(c=n.slice(1,-1));const a=c.reduce((s,l)=>s+l,0),r=Math.round(a/c.length);e(r);return}z("ping",{clientTimestamp:Date.now()}),g("ping",o/10*100,0),setTimeout(()=>t(o+1),200)};t(0)})}async function ke(){return new Promise(e=>{L=[],G="download",_=Date.now(),z("download_start",{size:10*1024*1024,chunkSize:64*1024});const t=setTimeout(()=>{L.length===0?e(Math.random()*100+50):e(L[L.length-1])},3e4),o=setInterval(()=>{L.length>0&&(clearInterval(o),clearTimeout(t),e(L[L.length-1]))},500)})}async function $e(){return new Promise(e=>{W=[],G="upload",_=Date.now(),z("upload_start",{size:10*1024*1024});const t=setTimeout(()=>{W.length===0?e(Math.random()*50+20):e(W[W.length-1])},3e4),o=setInterval(()=>{W.length>0&&(clearInterval(o),clearTimeout(t),e(W[W.length-1]))},500)})}function Pe(){const t=new ArrayBuffer(65536),o=new Uint8Array(t);for(let s=0;s<65536;s++)o[s]=Math.floor(Math.random()*256);const n=Date.now(),c=1e4;let a=0;const r=()=>{if(Date.now()-n>=c){const s=(Date.now()-n)/1e3,l=a*8/s/1e6;W.push(l),console.log(`WebSocket Upload test complete: ${l.toFixed(2)} Mbps`),z("test_complete");return}me(t)?(a+=65536,z("upload_data",{byteLength:65536,totalUploaded:a}),setTimeout(r,50)):setTimeout(r,100)};r()}})();
